#!/usr/bin/env zsh
# Import aliases from a Bash or Zsh alias backup file
# Usage: ./import_aliases.sh <alias-backup-file>

if [ $# -lt 1 ]; then
    echo "‚ùå Error: No alias file provided"
    echo ""
    echo "Usage: ./import_aliases.sh <alias-backup-file>"
    echo ""
    echo "Examples:"
    echo "  ./import_aliases.sh my_aliases_bkup/.bash-aliases-dev"
    echo "  ./import_aliases.sh ~/.bash-aliases"
    echo "  ./import_aliases.sh ~/backups/my-old-aliases.txt"
    echo ""
    exit 1
fi

ALIAS_FILE="$1"

if [ ! -f "$ALIAS_FILE" ]; then
    echo "‚ùå Error: File not found: $ALIAS_FILE"
    exit 1
fi

echo "üîÑ QuickSaveAlias Import Tool"
echo "=============================="
echo ""
echo "üìÅ Source file: $ALIAS_FILE"
echo ""

# Count aliases in the source file
total_aliases=$(grep -c "^alias " "$ALIAS_FILE" 2>/dev/null || echo 0)
echo "üìä Found $total_aliases aliases to import"
echo ""

# Backup current aliases
if [ -f ~/.zsh-aliases ]; then
    backup_file=~/.zsh-aliases.backup-$(date +%Y%m%d-%H%M%S)
    cp ~/.zsh-aliases "$backup_file"
    echo "üíæ Backed up current aliases to: $backup_file"
    echo ""
fi

# Source QuickSaveAlias functions if not already loaded
if ! type sval &>/dev/null; then
    echo "üîß Loading QuickSaveAlias functions..."
    source ~/.quicksavealias.sh -install 2>/dev/null
    echo ""
fi

# Initialize counters
imported=0
skipped=0

# Create a new aliases file with header
echo "# Zsh aliases file - auto-generated by QuickSaveAlias" > ~/.zsh-aliases
echo "# Special character aliases are managed in ~/.zsh_special_aliases.sh" >> ~/.zsh-aliases
echo "" >> ~/.zsh-aliases

echo "‚öôÔ∏è  Importing aliases..."
echo ""

# Process each line from the alias file
while IFS= read -r line; do
    # Skip empty lines and comments
    [[ -z "$line" || "$line" == \#* ]] && continue
    
    # Only process alias lines
    if [[ "$line" == alias* ]]; then
        # Extract alias name and value
        # Remove 'alias ' prefix
        clean_line="${line#alias }"
        
        # Extract name (before first =)
        alias_name=$(echo "$clean_line" | cut -d= -f1 | xargs)
        
        # Extract value (after first =) - keep it exactly as is, including quotes
        alias_value=$(echo "$clean_line" | cut -d= -f2-)
        
        # Skip if we couldn't extract name or value
        if [[ -z "$alias_name" || -z "$alias_value" ]]; then
            ((skipped++))
            continue
        fi
        
        # Check for unmatched quotes (broken alias definition) and auto-fix
        single_quote_count=$(echo "$alias_value" | grep -o "'" | wc -l | xargs)
        double_quote_count=$(echo "$alias_value" | grep -o '"' | wc -l | xargs)
        
        # Auto-fix: Add missing closing quote if needed
        if [[ $((single_quote_count % 2)) -ne 0 ]]; then
            # Odd number of single quotes - likely missing closing quote
            if [[ ! "$alias_value" =~ \'$ ]]; then
                # Doesn't end with quote, add it
                alias_value="${alias_value}'"
                echo "üîß Auto-fixed '$alias_name': Added missing closing quote"
            else
                # Ends with quote but odd count - embedded quote issue, skip
                echo "‚è≠Ô∏è  Skipping '$alias_name': complex quote issue (manual fix needed)"
                ((skipped++))
                continue
            fi
        elif [[ $((double_quote_count % 2)) -ne 0 ]]; then
            # Odd number of double quotes
            if [[ ! "$alias_value" =~ \"$ ]]; then
                alias_value="${alias_value}\""
                echo "üîß Auto-fixed '$alias_name': Added missing closing quote"
            else
                echo "‚è≠Ô∏è  Skipping '$alias_name': complex quote issue (manual fix needed)"
                ((skipped++))
                continue
            fi
        fi
        
        # Define skip list - very specific things to skip
        should_skip=0
        skip_reason=""
        
        # Skip purely numeric aliases (1-9 for directory stack)
        if [[ "$alias_name" =~ ^[0-9]$ ]]; then
            should_skip=1
            skip_reason="numeric (Oh-My-Zsh default)"
        # Skip single dash
        elif [[ "$alias_name" == "-" ]]; then
            should_skip=1
            skip_reason="special char (Oh-My-Zsh default)"
        # Skip underscore
        elif [[ "$alias_name" == "_" ]]; then
            should_skip=1
            skip_reason="special char (Oh-My-Zsh default)"
        # Skip three-or-more-dot aliases
        elif [[ "$alias_name" == "..." || "$alias_name" == "...." || "$alias_name" == "....." || "$alias_name" == "......" ]]; then
            should_skip=1
            skip_reason="dot alias (Oh-My-Zsh default)"
        # Skip common Oh-My-Zsh aliases that would cause conflicts
        elif [[ "$alias_name" == "grep" || "$alias_name" == "egrep" || "$alias_name" == "fgrep" ]]; then
            should_skip=1
            skip_reason="Oh-My-Zsh already defines this"
        elif [[ "$alias_name" == "ls" || "$alias_name" == "ll" || "$alias_name" == "la" || "$alias_name" == "l" ]]; then
            should_skip=1
            skip_reason="Oh-My-Zsh already defines this"
        elif [[ "$alias_name" == "l." ]]; then
            should_skip=1
            skip_reason="uses Linux-specific ls flags (--color)"
        # Skip bash-specific -p flag usage
        elif [[ "$alias_value" == *"alias -p"* ]]; then
            should_skip=1
            skip_reason="uses 'alias -p' (Bash-specific)"
        # Skip Windows winpty commands
        elif [[ "$alias_value" == winpty* ]]; then
            should_skip=1
            skip_reason="Windows-specific"
        # Skip read-only history variable
        elif [[ "$alias_name" == "history" ]]; then
            should_skip=1
            skip_reason="read-only variable"
        fi
        
        if [[ $should_skip -eq 1 ]]; then
            echo "‚è≠Ô∏è  Skipping '$alias_name': $skip_reason"
            ((skipped++))
            continue
        fi
        
        # Write the alias to the file in proper Zsh format
        # Just write it directly - the value already has proper quotes from the source file
        echo "alias $alias_name=$alias_value" >> ~/.zsh-aliases
        
        ((imported++))
        echo "‚úÖ $alias_name"
    fi
done < "$ALIAS_FILE"

echo ""
echo "üíæ Aliases written to ~/.zsh-aliases"
echo ""
echo "=============================="
echo "üìà Import Summary:"
echo "   ‚úÖ Imported: $imported"
echo "   ‚è≠Ô∏è  Skipped:  $skipped"
echo "   üìä Total:    $total_aliases"
echo ""

if [[ $imported -gt 0 ]]; then
    echo "‚ú® Successfully imported $imported aliases!"
else
    echo "‚ö†Ô∏è  No aliases were imported. Check the skip reasons above."
fi

echo ""
echo "Next steps:"
echo "  1. Close and reopen your terminal (or run: source ~/.zshrc)"
echo "  2. Test your aliases: lsal | grep -E '(cdgit|gst|kc1)'"
echo "  3. List all aliases: lsal | wc -l"
echo ""
